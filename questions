Certainly! Here's a list of 100 basic coding challenges that cover a wide range of concepts in C++ for beginners:

1. Print "Hello, World!" to the console.
2. Take two numbers as input from the user and print their sum.
3. Swap two numbers without using a temporary variable.
4. Find the maximum of two numbers.
5. Find the minimum of two numbers.
6. Check if a number is even or odd.
7. Check if a number is positive, negative, or zero.
8. Calculate the factorial of a number.
9. Check if a number is prime or not.
10. Print all prime numbers between 1 to N.
11. Print Fibonacci series up to N terms.
12. Check if a given year is a leap year.
13. Convert temperature from Celsius to Fahrenheit and vice versa.
14. Convert a decimal number to binary.
15. Convert a binary number to decimal.
16. Find the sum of digits of a number.
17. Reverse a number.
18. Check if a string is a palindrome.
19. Count the number of vowels and consonants in a string.
20. Check if two strings are anagrams of each other.
21. Find the length of a string without using the `length()` function.
22. Convert a string to uppercase.
23. Convert a string to lowercase.
24. Remove spaces from a string.
25. Find the largest word in a string.
26. Print the ASCII value of a character.
27. Find the square and cube of a number.
28. Calculate the power of a number.
29. Find the GCD (Greatest Common Divisor) of two numbers.
30. Find the LCM (Least Common Multiple) of two numbers.
31. Check if a number is a perfect number.
32. Generate all possible subsets of a set.
33. Find the sum of all elements in an array.
34. Find the average of elements in an array.
35. Find the largest element in an array.
36. Find the smallest element in an array.
37. Reverse an array.
38. Sort an array in ascending order.
39. Sort an array in descending order.
40. Merge two sorted arrays.
41. Remove duplicate elements from an array.
42. Find the second largest element in an array.
43. Find the second smallest element in an array.
44. Rotate an array to the left by N positions.
45. Rotate an array to the right by N positions.
46. Check if two arrays are equal.
47. Check if an array is sorted in ascending order.
48. Check if an array is sorted in descending order.
49. Find the intersection of two arrays.
50. Find the union of two arrays.
51. Find the difference between two arrays.
52. Implement linear search in an array.
53. Implement binary search in an array.
54. Implement selection sort.
55. Implement bubble sort.
56. Implement insertion sort.
57. Implement merge sort.
58. Implement quick sort.
59. Implement stack using arrays.
60. Implement queue using arrays.
61. Implement stack using linked list.
62. Implement queue using linked list.
63. Implement a circular queue.
64. Implement binary search tree (BST).
65. Insert a node in a BST.
66. Delete a node from a BST.
67. Traverse a BST in preorder, inorder, and postorder.
68. Check if a given binary tree is a BST.
69. Find the height of a binary tree.
70. Find the diameter of a binary tree.
71. Reverse a linked list.
72. Find the middle element of a linked list.
73. Detect a cycle in a linked list.
74. Remove duplicates from a sorted linked list.
75. Merge two sorted linked lists.
76. Implement a priority queue.
77. Implement a min heap.
78. Implement a max heap.
79. Implement Dijkstra's algorithm.
80. Implement BFS (Breadth-First Search) in a graph.
81. Implement DFS (Depth-First Search) in a graph.
82. Check if a graph is bipartite.
83. Find the shortest path between two nodes in a graph.
84. Find the number of connected components in a graph.
85. Find the topological ordering of a DAG (Directed Acyclic Graph).
86. Implement a hash table (using chaining).
87. Implement a hash table (using open addressing).
88. Implement string matching algorithms (Brute Force, KMP, Rabin-Karp).
89. Implement matrix operations (addition, subtraction, multiplication).
90. Implement sparse matrix representation and operations.
91. Find the transpose of a matrix.
92. Find the determinant of a matrix.
93. Find the inverse of a matrix.
94. Implement dynamic programming (Fibonacci, 0/1 Knapsack).
95. Solve the Tower of Hanoi problem.
96. Implement the Sieve of Eratosthenes.
97. Implement the Josephus Problem.
98. Implement the Game of Life (Conway's Game of Life).
99. Implement a simple calculator with basic operations.
100. Implement a basic text-based tic-tac-toe game.

These challenges cover a broad range of topics and will help you gain proficiency in C++. Start with simpler ones and gradually move towards more complex ones as you become more comfortable with the language. Happy coding!